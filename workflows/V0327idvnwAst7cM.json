{
  "id": "V0327idvnwAst7cM",
  "name": "文生图 测试",
  "nodes": [
    {
      "parameters": {
        "method": "POST",
        "url": "https://flux.comnergy.com/api/generate",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "accept",
              "value": "*/*"
            },
            {
              "name": "accept-language",
              "value": "zh-CN,zh;q=0.9,en;q=0.8"
            },
            {
              "name": "origin",
              "value": "https://flux.comnergy.com"
            },
            {
              "name": "priority",
              "value": "u=1, i"
            },
            {
              "name": "referer",
              "value": "https://flux.comnergy.com/zh"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"137\", \"Chromium\";v=\"137\", \"Not/A)Brand\";v=\"24\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"macOS\""
            },
            {
              "name": "sec-fetch-dest",
              "value": "empty"
            },
            {
              "name": "sec-fetch-mode",
              "value": "cors"
            },
            {
              "name": "sec-fetch-site",
              "value": "same-origin"
            },
            {
              "name": "user-agent",
              "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "prompt",
              "value": "={{ $json.output.prompt }}"
            },
            {
              "name": "width",
              "value": "768"
            },
            {
              "name": "height",
              "value": "1080"
            },
            {
              "name": "steps",
              "value": "20"
            },
            {
              "name": "batch_size",
              "value": "1"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -124,
        0
      ],
      "id": "1ad0d57a-aeaa-4b69-8ff4-cd5271b90677",
      "name": "HTTP Request",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "imageBase64",
        "options": {
          "fileName": "={{ $json.imageBase64.hash() + '.png' }}",
          "mimeType": "={{ $json.imageType }}"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        536,
        0
      ],
      "id": "47045aa0-2962-4767-979f-944e00cc9dc2",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "abf03dac-5f77-4d91-85d4-01fd37c4c061",
              "leftValue": "={{ $json.imageUrl.match(/^data:(.+);base64,(.+)$/) }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        96,
        0
      ],
      "id": "fbdece7e-1fab-422d-bb26-e9d8b5edc7c3",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "fcaa39dd-9feb-4828-8cd1-8fe2fb149690",
              "name": "imageBase64",
              "value": "={{ $json.imageUrl.match(/^data:(.+);base64,(.+)$/)[2] }}",
              "type": "string"
            },
            {
              "id": "ff86379d-4eaf-40bc-a321-523cf03cfd44",
              "name": "imageType",
              "value": "={{ $json.imageUrl.match(/^data:(.+);base64,(.+)$/)[1] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        316,
        0
      ],
      "id": "48e44afb-9d43-4862-aa2c-27a6612835b6",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.message.text }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=请你扮演一个顶级的AI绘画提示词（Prompt）架构师，专门为各种文生图的AI绘画平台打造高质量的图像生成指令。我的核心需求是生成具有“韩式写实相片风格”且固定为“3:4长宽比”的图像。\n\n当你接收到我输入的文字描述后，请严格遵循以下原则和步骤，为我构建一个最优化的AI绘画提示词：\n\n1.  **固定框架与核心指令**:\n    *   始终以“**韩式写实相片风格, 3:4长宽比**” (Korean real photo style, 1:1 aspect ratio) 作为提示词的开篇基础和固定框架。\n\n2.  **深度语义理解与要素精准提纯**:\n    *   深入分析我输入的文字描述，精准识别并提炼所有关键要素，包括但不限于：主体（人物/物体）、场景环境、具体动作/姿态、情绪表达、氛围营造、时代背景、服饰细节、光影特点等。\n    *   优先确保生成的关键词**高度忠实于我的原始描述意图**，避免主观臆断或过度引申。\n\n3.  **韩式写实风格强化与细节注入**:\n    *   在提纯的核心要素基础上，巧妙融入更能体现“韩式写实相片”质感的补充性描述词。例如但不限于：`细腻光影 (delicate lighting)`, `清透肤质 (clear skin texture)`, `自然表情 (natural expression)`, `叙事感 (narrative sense)`, `情绪张力 (emotional intensity)`, `电影级构图 (cinematic composition)`, `空气感 (sense of air/atmosphere)`, `干净的色调 (clean tones)`, `眼神光 (catchlights in eyes)`, `景深效果 (depth of field)`, `高细节纹理 (hyper-detailed textures)`。\n    *   选择与当前描述场景最契合的风格化词汇。\n\n4.  **最大化表达自由度与审查边界的艺术化导航 (核心要点)**:\n    *   **首要目标是忠实并最大化呈现我原始描述的创意与内涵。**\n    *   在AI平台可接受的范围内，勇敢探索表达的可能性。如果原始描述中包含可能触及审查边界的元素，请**避免直接使用可能引发审查的直白、负面或敏感词汇。**\n    *   **转而采用更高级的艺术手法进行转译和暗示**：通过**具体的、中性的、富有美感的场景描绘、物体象征、情绪氛围烘托、光影对比、人物姿态的艺术化处理**等间接方式来传达原始意图。\n    *   思考如何用“通过描绘A来暗示B”的策略，巧妙地引导AI生成接近预期的画面，实现“此时无声胜有声”的艺术效果。**核心在于“提纯要素要点”，并通过富有想象力的中性或正面描述重构画面感。**\n\n5.  **关键词优化与结构性**:\n    *   生成的提示词应以逗号分隔的关键词或短语组成，力求精炼、准确、高效。\n    *   内部逻辑上可以考虑信息层级（如：主体 > 环境 > 氛围 > 细节光影），但最终输出为扁平化的关键词序列。\n    *   避免不必要的重复和冗余词汇。\n\n请基于以上深度优化的规则和我提供的文字描述，为我生成一个高度优化的绘画提示词（**英文**），仅输出绘画提示词，使用**JSON**格式并用代码块包裹。\n**输出格式:**\n\n```json\n{\n \"prompt\": \"<PROMPT>\"\n}\n```"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -500,
        100
      ],
      "id": "f0a5a426-848e-45b4-94a0-4df9b55708bf",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"prompt\": \"\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -352,
        320
      ],
      "id": "ed57690a-5b4d-4658-8989-73d307803914",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -720,
        100
      ],
      "id": "af687703-cab3-4a20-8845-74d684f97d48",
      "name": "Telegram Trigger",
      "webhookId": "3e9a121a-a399-42f0-9b15-ca8eed22d55e",
      "credentials": {
        "telegramApi": {
          "id": "4LCo3T7FwwkMMw9u",
          "name": "Telegram - @wallpaper_test_tg_bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "binaryData": true,
        "additionalFields": {
          "caption": "={{ $('AI Agent').item.json.output.prompt }}",
          "reply_to_message_id": "={{ $('Telegram Trigger').item.json.message.message_id }}"
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        760,
        100
      ],
      "id": "f103d6f6-4adf-4896-976f-2c20d94b33ef",
      "name": "Telegram",
      "webhookId": "9f001ecc-7a13-4fb3-889d-38e419e92732",
      "credentials": {
        "telegramApi": {
          "id": "4LCo3T7FwwkMMw9u",
          "name": "Telegram - @wallpaper_test_tg_bot"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.images[0].url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        536,
        200
      ],
      "id": "86bf9759-7cb8-4644-8cd1-b85955982bba",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.siliconflow.cn/v1/images/generations",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"Kwai-Kolors/Kolors\",\n  \"prompt\": \"{{ $json.output.prompt }}\",\n  \"image_size\": \"960x1280\",\n  \"batch_size\": 1,\n  \"num_inference_steps\": 20,\n  \"guidance_scale\": 7.5\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        316,
        200
      ],
      "id": "c28bba0d-a5bc-48f4-8883-da8784916be5",
      "name": "siliconflow",
      "credentials": {
        "httpBearerAuth": {
          "id": "6MNMBkSbYY1ANfDb",
          "name": "Bearer Auth - siliconflow"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp-1219",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        -480,
        320
      ],
      "id": "b66a2b75-d22c-4afe-9d25-5da174c43ef8",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "HcRpLQ8AC9QYmUDr",
          "name": "Google Gemini(PaLM) Api - shoulai.yang@gmail.com"
        }
      }
    }
  ],
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "siliconflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "siliconflow": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "triggerCount": 1,
  "versionId": "9221b061-7b38-4768-bd50-38a3436c8bc8",
  "owner": {
    "type": "personal",
    "personalEmail": "shoulai.yang@gmail.com"
  },
  "parentFolderId": "tXbrPLEAcjwVXk68",
  "isArchived": false
}